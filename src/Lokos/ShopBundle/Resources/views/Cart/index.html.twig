{% trans_default_domain 'general' %}
{% extends '::base.html.twig' %}

{% block page_script %}
    {% javascripts
    '@LokosShopBundle/Resources/public/js/easyResponsiveTabs.js'
    '@LokosShopBundle/Resources/public/js/slides.min.jquery.js'
    %}
    <script src="{{ asset_url }}"></script>
    {% endjavascripts %}
{% endblock page_script %}

{% block content %}
    {{ block('categories') }}
    <div>
        {% if cart %}
            <table id="cart_table" class="table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Options</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan="2">Total:</td>
                        <td class="total-quantity"></td>
                        <td colspan="2" class="total-price"></td>
                    </tr>
                </tfoot>
                <tbody>
                    {% for key, item in cart %}
                        <tr class="item-cart item-{{ key }}" data-cart-item-id="{{ key }}" data-item-id="{{ item.id }}" data-item-price="{{ productData[item.id].product.price }}">
                            <th scope="row">{{ productData[item.id].product.name }}</th>
                            <td class="options">
                                {% if productData[item.id].product.productSets is not empty %}
                                    <div>
                                        {% for key, option in productData[item.id].options.0 %}
                                            <div>
                                                <h5>{{ option.name }}</h5>
                                                <div class="option-variants opt{{ option.id }}">
                                                    <div class="container">
                                                        <div class="row">
                                                            {% for value in productData[item.id].options.1[key] %}
                                                                <div class="option-value col-sm-1" data-option-price="{{ value.price }}"
                                                                     data-info='{"optionId":{{ option.id }},"valueId":{{ value.id }}}'>
                                                                    <b>{{ value.value }}</b>
                                                                </div>
                                                            {% endfor %}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        {% endfor %}
                                        <input class="prod-set" type="hidden" name="prodSet" value="{{ item.productSet }}">
                                        <input type="hidden" class="available-options" value={{ productData[item.id].availableOptions }}>
                                    </div>
                                {% endif %}
                            </td>
                            <td class="quantity">
                                <input class="item-quantity" name="quantity" value="{{ item.quantity }}" onchange="updateCart(this)"/>
                            </td>
                            <td class="item-price">{{ productData[item.id].product.price }}</td>
                            <td><span class="delete-item" onclick="deleteCartItem(this)">X</span></td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <h1>Cart is empty</h1>
        {% endif %}
    </div>

    {% if cart %}
        <a class="add-item-to-cart btn btn-primary" href="{{ path('lokos_shop_order') }}">Make an order</a>
    {% endif %}

    <script type="text/javascript">
        _.each($('.prod-set'), function(input){
            var setId = $(input).val(),
                wrapDiv = $(input).parent(),
                availableOptions = JSON.parse(wrapDiv.find('.available-options').val()),
                currentSet = availableOptions[setId];
            _.each(wrapDiv.find('.option-value'), function(optionValue){
                _.each(currentSet, function(setOption){
                    if(_.isEqual(setOption, JSON.parse($(optionValue).attr('data-info')))) {
                        $(optionValue).addClass('active');
                    }
                });
            });
        });
        var updateProductSets = function(){
            _.each($('.prod-set'), function(input){
                var wrapDiv = $(input).parent(),
                    optioValues = wrapDiv.find('.option-value.active'),
                    availableOptions = JSON.parse(wrapDiv.find('.available-options').val()),
                    currentSet = [];
                _.each(optioValues, function(optionValue){
                    var optionValueData = JSON.parse($(optionValue).attr('data-info'));
                    currentSet.push(optionValueData);
                });
                _.each(availableOptions, function(item, key){
                    if(_.isEqual(item.sort(), currentSet.sort())){
                        $(input).val(key);
                    }
                });
            });
        };
        var updatePriceAndQuantity = function(){
            var totalPrice = 0;
            var totalQuantity = 0;
            _.each($('tr.item-cart'), function(tr){
                var quantity = $(tr).find('input.item-quantity').val();
                totalQuantity += parseInt(quantity);
                var itemPrice = parseFloat($(tr).attr('data-item-price'));
                var optionsPrice = 0;
                _.each($(tr).find('.option-value.active'), function(option){
                    var tmp = $(option).attr('data-option-price');
                    optionsPrice += parseFloat(tmp);

                });
                itemPrice += optionsPrice;
                totalPrice += itemPrice;
                $(tr).find('.item-price').text(itemPrice);
                $('td.total-price').text(totalPrice);
                $('td.total-quantity').text(totalQuantity);
            });
        };
        var changeCart = function(item){
            $.ajax({
                url: '{{ path('lokos_shop_cart_edit') }}',
                type: 'post',
                data: { item: item },
                success: function(resp) {
                }
            });
        };
        var updateCart = function(){
            var cart = {};
            _.each($('.item-cart'), function(tr){
                var cartItem = {},
                    cartItemId = $(tr).attr('data-cart-item-id');
                cartItem['id'] = $(tr).attr('data-item-id');
                cartItem['quantity'] = $(tr).find('input.item-quantity').val();
                cartItem['productSet'] = $(tr).find('input.prod-set').val();
                cart[cartItemId] = cartItem;
            });
            changeCart(JSON.stringify(cart));
        };

        var deleteCartItem = function(el){
            $(el).closest('tr').remove();
            updateCart();
        };

        var checkSubmit = function(){
            var optionVariants = $('.option-variants'),
                arr = [];

            _.each(optionVariants, function(item){
                if($(item).find('div.active').length){
                    arr.push(1);
                }
            });
            if (optionVariants.length === arr.length || optionVariants.length == 0){
                $('.add-item-to-cart').removeAttr("disabled");
                updatePriceAndQuantity();
                updateProductSets();
                updateCart();
            } else {
                $('.add-item-to-cart').attr("disabled", "disabled");
            }
        };

        var chooseValue = function(e){

            var optsDiv = $(e.target).parent().parent(),
                wrapper = optsDiv.closest('tr'),
                span = ($(e.target)[0].nodeName == 'DIV')?$(e.target):$(e.target).parent(),
                chosenOption = JSON.parse(span.attr('data-info')),
                properSets = {},
                availableOptions = wrapper.find('.available-options').val()?JSON.parse(wrapper.find('.available-options').val()):null,
                activeDiv = optsDiv.find('div.active');

            if(activeDiv.length){
                optsDiv.find('div.active').removeClass('active');
            }
            span.addClass('active');

            span.parent().find('div.option-value').removeClass('deactive');//!!!!!!!
            optsDiv.find('#option-' + chosenOption['optionId']).val(span.attr('data-info'));
            _.forOwn(availableOptions, function (value, key) {
                _.each(value, function (item) {
                    if (_.isEqual(item, chosenOption)) {
                        properSets[key] = value;
                    }
                });
            });
            var activeOpts = getValsToOption(properSets);
            var allOptions = getAllValsToOption(availableOptions);
            _.each(wrapper.find('.option-variants'), function (item) {
                if (!$(item).hasClass('opt' + chosenOption['optionId'])) {
                    _.each($(item).find('div.option-value'), function (span) {
                        var spanInfo = JSON.parse($(span).attr('data-info'));
                        if (!_.includes(activeOpts[spanInfo['optionId']], spanInfo['valueId'])) {
                            $(span).addClass('deactive');
                            $(span).removeClass('active');
                        } else {
                            $(span).removeClass('deactive');
                        }

                    });
                }
            });

            function getValsToOption(properSets) {
                var obj = {};
                _.each(properSets, function (item) {
                    _.each(item, function (value) {
                        if (!obj[value['optionId']]) {
                            obj[value['optionId']] = [];
                        }
                        obj[value['optionId']].push(value['valueId']);
                    })
                });

                return obj;
            }

            function getAllValsToOption(availableOptions) {
                var obj = {};
                _.each(availableOptions, function (item) {
                    _.each(item, function (value) {
                        if (!obj[value['optionId']]) {
                            obj[value['optionId']] = [];
                        }
                        obj[value['optionId']].push(value['valueId']);
                    })
                });

                return obj;
            }

            function checkChosenAvailable(item, activeOpts) {
                _.each(item.parent().find('span.option-value'), function (span) {
                    var spanInfo = JSON.parse($(span).attr('data-info'));
                    if (!_.includes(activeOpts[spanInfo['optionId']], spanInfo['valueId'])) {
                        $(span).addClass('deactive');
                    } else {
                        $(span).removeClass('deactive');
                    }

                });
            }

            checkChosenAvailable(span, allOptions);

            checkSubmit();
        };

        $('.option-value').click(chooseValue);
        updatePriceAndQuantity();

    </script>
    <a href="#" id="toTop"><span id="toTopHover"> </span></a>
{% endblock %}
